import sys
import random
import time
import psutil
import re
sys.path.append('../../')
from st_increment_only_counter_crdt import IncrementOnlyCounter
import controller
config(channel is fifo, clock is lamport)


class P(process, controller.Controllee):
    def setup(ctl, s:set,fail_rate:float,ninc:int,time_out:int,crash_timer:int):
        super().setup(ctl)
        # Increment Counter crdt is the payload
        self.crdt = IncrementOnlyCounter(self,s)
        # Count to check for convergence and termination
        self.count = 0          
        
    # Query method to lookup final counter value 
    def receive(msg=('query')):
         output('Final state at replica '+str(self.crdt.value()))
         
    # Increment counter method
    def receive(msg=('update_increment')): 
        self.crdt.increment()
        send(('merge',self.crdt), to = s-{self})
        count +=1

    # Merge operation
    def receive(msg=('merge',other_crdt)): 
        self.crdt.payload = IncrementOnlyCounter.merge(self.crdt,other_crdt)
        count +=1
        
    # Compare operation
    def receive(msg=('compare', other_crdt)):
        result = IncrementOnlyCounter.compare(self.crdt,other_crdt)
        output('Compare result :'+str(result))

    @controller.run
    def run():
        prob_rep_fail = random.random()
        # Simulate process crash and recovery
        if (prob_rep_fail<=fail_rate):
            output('Process crashed. Recovering...')
            time.sleep(crash_timer)
        # Check if replicas converges within timeout range
        if await(self.count==ninc):
            pass
        elif timeout(time_out):
            output('Time out reached before convergence, states across replicas may not be consistent')
        send(('done',self), to=parent())
        await(received(('done',), from_=parent()))


def main():
    # Input parameters
    nreplicas = int((sys.argv[1]) if len(sys.argv) > 1 else 2)
    ninc =  int((sys.argv[2]) if len(sys.argv) > 2 else 1)
    process_fail_rate = float((sys.argv[3]) if len(sys.argv) > 3 else 0)
    time_out = int((sys.argv[4]) if len(sys.argv) > 4 else 5)
    crash_timer = int((sys.argv[5]) if len(sys.argv) > 5 else 0)

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nreplicas, ))
    start(ctl)
    ps = new(P, num=nreplicas)

    for p in ps: setup(p, (ctl,ps,process_fail_rate,ninc,time_out,crash_timer,))
    start(ps)
    # Sending increment commands to random replicas
    for i in range(0,ninc):
        r = random.randint(1,nreplicas)
        index = 0
        replica = None
        for p in ps:
            if index == r-1:
                replica = p
                break
            else:
                index = index+1
        output('sending increment to : '+str(replica))
        send(('update_increment'), to = replica)

    await(each(p in ps, has=received(('done', p))))
    # Queries the final state of each replica
    send(('query'), to = ps)
    # For Memory Profiling
    p = psutil.Process()
    output(p.as_dict(attrs=['memory_info', 'cpu_percent' ,'pid']))
    send(('done',), to=ps)
