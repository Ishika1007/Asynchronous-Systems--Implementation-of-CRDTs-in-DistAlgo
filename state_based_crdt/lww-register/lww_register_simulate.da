import sys
import random
import time
import re
import psutil
sys.path.append('../../')

from lww_register_crdt import LWWRegister
import controller
config(channel is fifo, clock is lamport)

class Replica(process, controller.Controllee):
  def setup(ctl, fail_rate:float, s:set, ntasks:int, time_out:int, crash_timer:int):
    super().setup(ctl)
    # Initialize logical clock
    c = logical_clock()
    # LWWRegister crdt is the payload
    self.crdt = LWWRegister(0, c)
    # Count to check for convergence and termination
    self.count = 0
    
  # Query method to lookup 
  def receive(msg=('query')):
    output('Query lookup at replica '+str(self.crdt.x)+' Winning timestamp: '+str(self.crdt.t))

  # Assign method to write value
  def receive(msg=('assign', w)):
    self.crdt.assign(w, logical_clock())
    send(('merge',self.crdt), to = s)
    self.count +=1
    
  # Merge operation
  def receive(msg=('merge', other_crdt)):
    self.crdt = LWWRegister.merge(self.crdt, other_crdt)
    self.count += 1
  
  # Compare operation
  def receive(msg=('compare', other_crdt)):
    output('Compare result '+str(LWWRegister.compare(self.crdt, other_crdt)))

  @controller.run
  def run():
    # Simulate process crash and recovery
    if (fail_rate >= random.random()):
        output('Process failed. Recovering...')
        time.sleep(crash_timer)
    # Check if replicas converges within timeout range
    if await(self.count==ntasks):
        pass
    elif timeout(time_out):
        output('Time out reached before convergence, states across replicas may not be consistent')
    send(('done',self), to=parent())
    await(received(('done',), from_=parent()))

def main():
        # Input Parameters
        nreplicas = int((sys.argv[1]) if len(sys.argv) > 1 else 2)
        n =  int((sys.argv[2]) if len(sys.argv) > 2 else 1)
        process_fail_rate = float((sys.argv[3]) if len(sys.argv) > 3 else 0)
        time_out = int((sys.argv[4]) if len(sys.argv) > 4 else 1)
        crash_timer = int((sys.argv[5]) if len(sys.argv) > 5 else 0)

        ctl = new(controller.Controller, num= 1)
        setup(ctl, (nreplicas, ))
        start(ctl)
        ps = new(Replica, num=nreplicas)

        for p in ps: setup(p, (ctl,process_fail_rate, ps-{p},n, time_out, crash_timer,))
        start(ps)
        # Sending write commands to random replicas
        for i in range(1,n+1):
            r = random.randint(1,nreplicas)
            index = 0
            replica = None
            for p in ps:
                if index == r-1:
                    replica = p
                    break
                else:
                    index = index+1
            c = logical_clock()
            output('sending payload '+str(i)+' to : '+str(replica) +' at time '+str(c))
            send(('assign',i), to = replica)
        await(each(p in ps, has=received(('done', p))))
         # Queries the final state of each replica
        send(('query'),to=ps)
        # Memory Profiling
        p = psutil.Process()
        output(p.as_dict(attrs=['memory_info', 'cpu_percent' ,'pid']))
        send(('done',), to=ps)
