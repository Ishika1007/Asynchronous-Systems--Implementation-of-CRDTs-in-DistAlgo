import sys
import random
import time
from or_set_crdt import ORSet
import psutil
sys.path.append('../../../')
import controller

config(clock is lamport)

class Replica(process, controller.Controllee):
    def setup(ctl, fail_rate:float, s:set, ntasks:int,time_out:int, crash_timer:int):
        super().setup(ctl)
        # ORSet crdt is the payload
        self.crdt =  ORSet()
        # Count to check for convergence and termination
        self.count = 0

    # Query method to lookup element 'e' in Orset of replica
    def receive(msg=('query',e )):
        output('Query lookup for element: '+str(e)+' returned '+str(self.crdt.lookup(e)))
        output('Final state at replica '+str(self.crdt.S))

    # At Source add element method
    def receive(msg=('update_add', e)): 
            alpha = self.crdt.update_add_atSource(e)
            #no precondition for downstream
            send(('update_add_downstream',e,alpha), to=s)
            self.count += 1
            
    # Downstream update add operation
    def receive(msg=('update_add_downstream',e,alpha)):
            self.crdt.update_add_downstream(e,alpha)
            self.count += 1
            
    # At Source remove element method
    def receive(msg=('update_remove', e)):
            R  = self.crdt.update_remove_atSource(e)
            #no precondition for downstream
            send(('update_remove_downstream',R), to=s)
            self.count += 1
    # Downstream update remove operation
    def receive(msg=('update_remove_downstream',R)):
            self.crdt.update_remove_downstream(R)
            self.count +=1

    @controller.run
    def run():
         # Simulate process crash and recovery
         if (fail_rate >= random.random()):
            output('Process crashed. Recovering...')
            time.sleep(crash_timer)
            
         # Check if replicas converges within timeout range
         if await(self.count==ntasks):
            pass
         elif timeout(time_out):
            pass
         send(('done',self), to=parent())
         await(received(('done',), from_=parent()))

def main():
    # Input parameters
    nreplicas = int((sys.argv[1]) if len(sys.argv) > 1 else 2)
    nadd =  int((sys.argv[2]) if len(sys.argv) > 2 else 1)
    nrem =  int((sys.argv[3]) if len(sys.argv) > 3 else 1)
    process_fail_rate = float((sys.argv[4]) if len(sys.argv) > 4 else 0)
    time_out = int((sys.argv[5]) if len(sys.argv) > 5 else 5)
    crash_timer = int((sys.argv[6]) if len(sys.argv) > 6 else 0)

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nreplicas, ))
    start(ctl)
    ps = new(Replica, num=nreplicas)

    for p in ps: setup(p, (ctl,process_fail_rate, ps-{p},nadd+nrem,time_out,crash_timer,))
    start(ps)
    n = nadd+nrem
    # Sending additions/removals commands to random replicas
    for i in range(0,n):
        r = random.randint(1,nreplicas)
        index = 0
        replica = None
        for p in ps:
            if index == r-1:
                replica = p
                break
            else:
                index = index+1
        add_or_remove = random.randint(1,2)
        if (add_or_remove == 1 and nadd>0) or nrem<0:
            send(('update_add',i), to = replica)
            output('Adding '+str(i)+' to replica '+str(replica))
            nadd = nadd-1
        else:
            elem = random.randint(0,nadd+nrem)
            send(('update_remove',elem), to = replica)
            output('Removing '+str(elem) +' from '+str(replica))
            nrem = nrem-1
    await(each(p in ps, has=received(('done', p))))
    # Queries the final state of each replica
    send(('query', random.randint(0,n)), to = ps)
    # For Memory profiling
    p = psutil.Process()
    output(p.as_dict(attrs=['memory_info', 'cpu_percent' ,'pid']))
    send(('done',), to=ps)
